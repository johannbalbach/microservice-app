---
swagger: "2.0"
info:
  description: ""
  version: "1.0.6"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "user"
  description: "Operations about user"
- name: "documents"
  description: "Operations with documents"
- name: "enrollment"
  description: "Operations with user enrollment"
- name: "dictionary"
  description: "Operations with dictionary/external database"
schemes:
- "https"
- "http"
paths:
  /documents/getPassport:
    get:
      tags:
      - "documents"
      summary: "Получить паспорт абитуриента"
      description: "Возвращает информацию о паспорте абитуриента, авторизованного в системе."
      operationId: "getApplicantPassport"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Passport"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /documents/getEducationDocument:
    get:
      tags:
      - "documents"
      summary: "Получить документ об образовании абитуриента"
      description: "Возвращает информацию о документе об образовании абитуриента, авторизованного в системе."
      operationId: "getApplicantEducationDocument"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Document"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /documents/{ApplicantId}/getPassport:
    get:
      tags:
      - "documents"
      summary: "Получить паспорт абитуриента (менеджер)"
      description: "Возвращает информацию о паспорте абитуриента по его ID. Доступно только менеджерам."
      operationId: "getApplicantPassportByIdManager"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "ApplicantId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Document"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /documents/{ApplicantId}/getEducationDocument:
    get:
      tags:
      - "documents"
      summary: "Получить документ об образовании абитуриента (менеджер)"
      description: "Возвращает информацию о документе об образовании абитуриента по его ID. Доступно только менеджерам."
      operationId: "getApplicantEducationDocumentByIdManager"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "ApplicantId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Document"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /documents/download/{ScanId}:
    get:
      tags:
      - "documents"
      summary: "Скачать скан документа"
      description: "Позволяет скачать скан документа по его ID.  Доступно авторизованному пользователю, которому принадлежит документ, а также привелигированным менеджерам."
      operationId: "downloadDocumentScan"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "ScanId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/File"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /documents/editDocument/{DocumentId}:
    put:
      tags:
      - "documents"
      summary: "Редактировать документ"
      description: "Позволяет изменить тип документа. Доступно авторизованному пользователю, которому принадлежит документ, а также привелигированным менеджерам."
      operationId: "editDocument"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "DocumentId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                documentType:
                  type: "string"
                  enum:
                    - "passport"
                    - "education_document"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Document"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /documents/deleteScan/{ScanId}:
    delete:
      tags:
      - "documents"
      summary: "Удалить скан документа"
      description: "Позволяет удалить скан документа по его ID.  Доступно авторизованному пользователю, которому принадлежит документ, а также привелигированным менеджерам."
      operationId: "deleteDocumentScan"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "ScanId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /documents/uploadScan/{DocumentId}:
    post:
      tags:
      - "documents"
      summary: "Загрузить скан документа"
      description: "Позволяет загрузить скан документа.  Доступно авторизованному пользователю, которому принадлежит документ, а также привелигированным менеджерам."
      operationId: "uploadDocumentScan"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "DocumentId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "file"
        in: "formData"
        required: true
        type: "file"
        description: "Файл скан-копии документа"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Scan"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /documents/updateScan/{ScanId}:
    put:
      tags:
      - "documents"
      summary: "Обновить скан документа"
      description: "Позволяет заменить скан документа по его ID новым файлом.  Доступно только авторизованному пользователю, которому принадлежит документ."
      operationId: "updateDocumentScan"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "ScanId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "file"
        in: "formData"
        required: true
        type: "file"
        description: "Файл скан-копии документа"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Scan"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /Applicant/getListOfFaculties:
    get:
      tags:
      - "applicant"
      summary: "Получить список факультетов"
      description: "Возвращает список всех факультетов, без фильтрации"
      operationId: "getApplicantPrograms"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FacultyList"
        401:
          description: "Unauthorized"
  /Applicant/getMyPrograms:
    get:
      tags:
      - "applicant"
      summary: "Получить список программ абитуриента"
      description: "Возвращает список программ, в которые подал документы авторизованный абитуриент."
      operationId: "getApplicantPrograms"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Program"
        401:
          description: "Unauthorized"
  /Applicant/addProgramToMyList/{id}:
    post:
      tags:
      - "applicant"
      summary: "Подать документы на программу"
      description: "Позволяет авторизованному абитуриенту подать документы на программу по ее ID."
      operationId: "addProgramToApplicantList"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /Applicant/changeProgramPriority/{id}:
    put:
      tags:
      - "applicant"
      summary: "Изменить приоритет программы"
      description: "Позволяет авторизованному абитуриенту изменить приоритет программы в своем списке."
      operationId: "changeProgramPriority"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                priority:
                  type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /Applicant/removeProgramFromMyList/{id}:
    delete:
      tags:
      - "applicant"
      summary: "Удалить программу из списка"
      description: "Позволяет авторизованному абитуриенту удалить программу из своего списка."
      operationId: "removeProgramFromApplicantList"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /Applicant/getListOfPrograms:
    get:
      tags:
      - "applicant"
      summary: "Получить список программ с пагинацией и фильтрацией"
      description: "Возвращает список программ для подачи документов с возможностью пагинации и фильтрации по факультету, уровню образования, форме обучения, языку обучения и части названия/кода программы."
      operationId: "getListOfProgramsWithPaginationAndFiltering"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "page"
        in: "query"
        type: "integer"
        default: 1
        description: "Номер страницы (по умолчанию 1)"
      - name: "size"
        in: "query"
        type: "integer"
        default: 10
        description: "Количество элементов на странице (по умолчанию 10)"
      - name: "facultyId"
        in: "query"
        type: "integer"
        format: "int64"
        description: "Идентификатор факультета (опционально)"
      - name: "educationLevel"
        in: "query"
        type: "string"
        enum:
        - "bachelor"
        - "master"
        - "postgraduate"
        description: "Уровень образования (опционально)"
      - name: "educationForm"
        in: "query"
        type: "string"
        enum:
        - "full_time"
        - "part_time"
        description: "Форма обучения (опционально)"
      - name: "language"
        in: "query"
        type: "string"
        description: "Язык обучения (опционально)"
      - name: "search"
        in: "query"
        type: "string"
        description: "Поиск по части названия/кода программы (опционально)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProgramWithPaginationInfo"
  /enrollment/getAdmission/{id}:
    get:
      tags:
      - "enrollment"
      summary: "Получить информацию о поступлении"
      description: "Возвращает информацию о поступлении абитуриента по его ID (доступно только авторизованному абитуриенту)."
      operationId: "getApplicantAdmission"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Admission"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /enrollment/getListOfAdmissions:
    get:
      tags:
      - "enrollment"
      summary: "Получить список поступлений с пагинацией, фильтрацией и сортировкой"
      description: "Возвращает список заявок на поступление, видимых этому менеджеру, с возможностью пагинации, фильтрации по имени, программе, факультету, статусу, наличию менеджера, а также сортировки по дате внесения последних изменений."
      operationId: "getListOfAdmissionsWithPaginationFilteringAndSorting"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "page"
        in: "query"
        type: "integer"
        default: 1
        description: "Номер страницы (по умолчанию 1)"
      - name: "size"
        in: "query"
        type: "integer"
        default: 10
        description: "Количество элементов на странице (по умолчанию 10)"
      - name: "search"
        in: "query"
        type: "string"
        description: "Поиск по части имени абитуриента (опционально)"
      - name: "programId"
        in: "query"
        type: "integer"
        format: "int64"
        description: "Идентификатор программы (опционально)"
      - name: "facultyIds"
        in: "query"
        type: "array"
        items:
          type: "integer"
          format: "int64"
        description: "Список идентификаторов факультетов (опционально)"
      - name: "status"
        in: "query"
        type: "string"
        enum:
        - "created"
        - "under_review"
        - "approved"
        - "rejected"
        description: "Статус заявки (опционально)"
      - name: "unassignedOnly"
        in: "query"
        type: "boolean"
        description: "Отображать только заявки без менеджера (опционально)"
      - name: "sortBy"
        in: "query"
        type: "string"
        enum:
        - "lastModifiedDateDesc"
        - "lastModifiedDateAsc"
        description: "Поле для сортировки (опционально)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/AdmissionWithPaginationInfo"
        401:
          description: "Unauthorized"
  /enrollment/editAdmissionStatus/{id}:
    put:
      tags:
      - "enrollment"
      summary: "Подтвердить/отклонить предложение о зачислении"
      description: "Позволяет авторизованному абитуриенту подтвердить или отклонить предложение о зачислении по его ID."
      operationId: "editAdmissionStatus"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                status:
                  type: "string"
                  enum:
                    - "approved"
                    - "rejected"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /enrollment/assignManager/{admissionId}:
    put:
      tags:
      - "enrollment"
      summary: "Назначить менеджера абитуриенту"
      description: "Позволяет менеджеру назначить себя ответственным за конкретного абитуриента по его ID поступления."
      operationId: "assignManagerToAdmission"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "admissionId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /management/getApplicant/{id}:
    get:
      tags:
      - "management"
      summary: "Получить информацию об абитуриенте"
      description: "Возвращает информацию об абитуриенте по его ID (доступно только менеджерам)."
      operationId: "getApplicantByIdManager"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Applicant"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /management/getListOfApplicants:
    get:
      tags:
      - "management"
      summary: "Получить список абитуриентов, привязанных к менеджеру"
      description: "Возвращает список абитуриентов, видимых данному менеджеру, с возможностью фильтрации по имени, фамилии, дате рождения, полу, гражданству, номеру телефона."
      operationId: "getApplicantsListManagerWithFiltering"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "search"
        in: "query"
        type: "string"
        description: "Поиск по имени, фамилии (опционально)"
      - name: "birthDateFrom"
        in: "query"
        type: "string"
        format: "date"
        description: "Дата рождения с (опционально)"
      - name: "birthDateTo"
        in: "query"
        type: "string"
        format: "date"
        description: "Дата рождения по (опционально)"
      - name: "gender"
        in: "query"
        type: "string"
        enum:
        - "male"
        - "female"
        description: "Пол (опционально)"
      - name: "citizenship"
        in: "query"
        type: "string"
        description: "Гражданство (опционально)"
      - name: "phoneNumber"
        in: "query"
        type: "string"
        description: "Номер телефона (опционально)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ApplicantsList"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
  /management/editApplicant/{id}:
    put:
      tags:
      - "management"
      summary: "Редактировать информацию об абитуриенте"
      description: "Позволяет менеджеру изменить информацию об абитуриенте по его ID."
      operationId: "editApplicantByIdManager"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/Applicant"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Applicant"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /management/getListOfManagers:
    get:
      tags:
      - "management"
      summary: "Получить список менеджеров"
      description: "Возвращает список менеджеров, видимых данному администратору, с возможностью фильтрации по типу, факультету, абитуриенту и другим параметрам."
      operationId: "getListOfManagersWithFiltering"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "type"
        in: "query"
        type: "string"
        enum:
        - "main"
        - "regular"
        description: "Тип менеджера (опционально)"
      - name: "facultyId"
        in: "query"
        type: "integer"
        format: "int64"
        description: "Идентификатор факультета (опционально)"
      - name: "applicantId"
        in: "query"
        type: "integer"
        format: "int64"
        description: "Идентификатор абитуриента (опционально)"
      - name: "search"
        in: "query"
        type: "string"
        description: "Поиск по имени, фамилии (опционально)"
      - name: "sortBy"
        in: "query"
        type: "string"
        enum:
        - "lastNameAsc"
        - "lastNameDesc"
        description: "Поле для сортировки (опционально)"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ManagersList"
        401:
          description: "Unauthorized"
  /management/addManager/{userId}:
    post:
      tags:
      - "management"
      summary: "Добавить менеджера"
      description: "Позволяет добавить нового менеджера по его ID пользователя."
      operationId: "addManager"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Manager"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /management/addMainManager/{userId}:
    post:
      tags:
      - "management"
      summary: "Добавить главного менеджера"
      description: "Позволяет добавить нового главного менеджера по его ID пользователя."
      operationId: "addMainManager"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Manager"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /dictionary/importDictionary:
    post:
      tags:
      - "dictionary"
      summary: "Импортировать словарь"
      description: "Позволяет импортировать словарь из файла."
      operationId: "importDictionary"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "file"
        in: "formData"
        required: true
        type: "file"
        description: "Файл словаря (формат зависит от реализации)"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
  /dictionary/checkStatus/{importId}:
    get:
      tags:
      - "dictionary"
      summary: "Проверка статуса импорта словаря"
      description: "Позволяет проверить статус импорта словаря по ID задачи импорта."
      operationId: "checkDictionaryImportStatus"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "importId"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                enum:
                  - "pending"
                  - "processing"
                  - "completed"
                  - "failed"
              message:
                type: "string"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Авторизация пользователя"
      description: "Позволяет пользователю авторизоваться в системе с помощью логина и пароля."
      parameters:
      - name: "user"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Успешная авторизация"
          schema:
            $ref: "#/definitions/TokenResponse"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
  /user/register:
    post:
      tags:
      - "user"
      summary: "Регистрация пользователя"
      description: "Позволяет создать нового юзера"
      operationId: "registerUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/UserRegisterDTO"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
  /user/getProfile:
    get:
      tags:
      - "user"
      summary: "Получить профиль пользователя"
      operationId: "getUserProfile"
      produces:
      - "application/json"
      responses:
        200:
          description: "ОК"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        401:
          description: "Unauthorized"
  /user/editProfile:
    put:
      tags:
      - "user"
      summary: "Изменить профиль пользователя"
      operationId: "editUserProfile"
      parameters:
      - name: "user"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/UserProfileEditDTO"
      responses:
        200:
          description: "ОК"
          schema:
            $ref: "#/definitions/UserProfileDTO"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
  /user/changePassword:
    post:
      tags:
      - "user"
      summary: "Поменять пароль пользователя"
      description: "Возвращает токен, надо переавторизовываться"
      operationId: "changePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "Успешная авторизация"
          schema:
            $ref: "#/definitions/TokenResponse"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Выход из аккаунта"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        200:
          description: "successful operation"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
  /notifications/email/{userId}:
    post:
      tags:
      - "notifications"
      summary: "Отправить email-уведомление"
      description: "Отправляет email-уведомление с указанным текстом конкретному юзеру по его ID."
      operationId: "sendEmailNotification"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                message:
                  type: "string"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "https://petstore.swagger.io/oauth/authorize"
    flow: "implicit"
    scopes:
      read:pets: "read your pets"
      write:pets: "modify pets in your account"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      fullName:
        type: "string"
      email:
        type: "string"
      role:
        type: "string"
        enum:
          - "applicant"
          - "manager"
          - "main_manager"
    xml:
      name: "User"
  UserRegisterDTO:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      fullName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  UserProfileDTO:
    type: "object"
    properties:
      fullName:
        type: "string"
      email:
        type: "string"
      role:
        type: "string"
        enum:
          - "applicant"
          - "manager"
          - "main_manager"
    xml:
      name: "User"
  UserProfileEditDTO:
    type: "object"
    properties:
      fullName:
        type: "string"
      email:
        type: "string"
    xml:
      name: "User"
  Passport:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      series:
        type: "string"
      number:
        type: "string"
      issuedBy:
        type: "string"
      birthDate:
        type: "string"
      placeOfBirth:
        type: "string"
  Applicant:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      firstName:
        type: "string"
      lastName:
        type: "string"
      birthDate:
        type: "string"
        format: "date"
      gender:
        type: "string"
        enum:
          - "male"
          - "female"
      citizenship:
        type: "string"
      phoneNumber:
        type: "string"
    xml:
      name: "Applicant"
  ApplicantsList:
    type: "object"
    properties:
      applicants:
        type: "array"
        items:
          $ref: "#/definitions/Applicant"
  Program:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      facultyId:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      code:
        type: "string"
      educationLevel:
        type: "string"
        enum:
          - "bachelor"
          - "master"
          - "postgraduate"
      language:
        type: "string"
      educationForm:
        type: "string"
        enum:
          - "full_time"
          - "part_time"
    xml:
      name: "Program"
  Faculty:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
    xml:
      name: "Faculty"
  FacultyList:
    type: "object"
    properties:
      Faculties:
        type: "array"
        items:
          $ref: "#/definitions/Faculty"
  Document:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      applicantId:
        type: "string"
        format: "uuid"
      documentType:
        type: "string"
        enum:
          - "passport"
          - "education_document"
      status:
        type: "string"
        enum:
          - "created"
          - "under_review"
          - "approved"
          - "rejected"
    xml:
      name: "Document"
  Scan:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      documentId:
        type: "string"
        format: "uuid"
      fileName:
        type: "string"
      fileUrl:
        type: "string"
    xml:
      name: "Scan"
  Admission:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      applicantId:
        type: "string"
        format: "uuid"
      programId:
        type: "integer"
        format: "int64"
      priority:
        type: "integer"
      status:
        type: "string"
        enum:
          - "created"
          - "under_review"
          - "approved"
          - "rejected"
      managerId:
        type: "string"
        format: "uuid"
    xml:
      name: "Admission"
  Manager:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      facultyId:
        type: "string"
        format: "uuid"
    xml:
      name: "Manager"
  ManagersList:
    type: "object"
    properties:
      managers:
        type: "array"
        items:
          $ref: "#/definitions/Manager"
  DictionaryItem:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
  ProgramWithPaginationInfo:
    type: "object"
    properties:
      programs:
        type: "array"
        items:
          $ref: "#/definitions/Program"
      totalElements:
        type: "integer"
        format: "int64"
      totalPages:
        type: "integer"
        format: "int64"
  AdmissionWithPaginationInfo:
    type: "object"
    properties:
      admissions:
        type: "array"
        items:
          $ref: "#/definitions/Admission"
      totalElements:
        type: "integer"
        format: "int64"
      totalPages:
        type: "integer"
        format: "int64"
  LoginCredentials:
    type: "object"
    required:
      - username
      - password
    properties:
      username:
        type: "string"
        description: "Имя пользователя"
      password:
        type: "string"
        description: "Пароль"
        format: "password"
  TokenResponse:
    type: "object"
    properties:
      token:
        type: "string"
        description: "Токен доступа"
      expiresIn:
        type: "integer"
        description: "Время жизни токена в секундах"
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        description: "Код ошибки"
      message:
        type: "string"
        description: "Описание ошибки"
  File:
    type: "object"
    properties:
      file:
        type: "object"
        description: "файл"
      name:
        type: "string"
        description: "Название файла"
      documentId:
        type: "string"
        format: "uuid"
    
    
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
