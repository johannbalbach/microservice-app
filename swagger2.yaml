---
swagger: "2.0"
info:
  description: ""
  version: "1.0.6"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "user"
  description: "Operations about user"
- name: "documents"
  description: "Operations with documents"
- name: "university"
  description: "Operations about university programs"
- name: "enrollment"
  description: "Operations with user enrollment"
- name: "dictionary"
  description: "Operations with dictionary/external database"
schemes:
- "https"
- "http"
paths:
  /documents/getPassport:
    get:
      tags:
      - "documents"
      summary: "Получить паспорт абитуриента"
      description: "Возвращает информацию о паспорте абитуриента, авторизованного в системе."
      operationId: "getApplicantPassport"
      produces:
      - "application/json"
      - "application/xml"
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            properties:
              $ref: "#/components/schemas/Document"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
  /documents/getEducationDocument:
    get:
      tags:
      - "documents"
      summary: "Get user's documents"
      description: "Allows an abiturient to get their documents"
      operationId: "getDocuments"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserDocuments"
  /documents/{ApplicantId}/getPassport:
    get:
      tags:
      - "documents"
      summary: "Get user's documents"
      description: "Allows an abiturient to get their documents"
      operationId: "getDocuments"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserDocuments"
  /documents/{ApplicantId}/getEducationDocument:
    get:
      tags:
      - "documents"
      summary: "Get user's documents"
      description: "Allows an abiturient to get their documents"
      operationId: "getDocuments"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserDocuments"
  /documents/download/{ScanId}:
    get:
      tags:
      - "documents"
      summary: "Download a document"
      description: "Allows an abiturient to download a specific document"
      operationId: "downloadDocument"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the document to download"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "file"
  /documents/editDocument/{DocementId}:
    put:
      tags:
      - "documents"
      summary: "Edit user's documents"
      description: "Allows an abiturient to edit their documents"
      operationId: "editDocuments"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the document to download"
        required: true
        type: "string"
      - name: "document"
        in: "body"
        description: "Updated document data"
        required: true
        schema:
          $ref: "#/definitions/Document"
  /documents/deleteScan/{ScanId}:
    delete:
      tags:
      - "documents"
      summary: "Delete a document scan"
      description: "Allows an abiturient to delete a scanned document"
      operationId: "deleteScan"
      parameters:
      - name: "id"
        in: "query"
        description: "ID of the scanned document to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
  /documents/uploadScan/{DocumentId}:
    post:
      tags:
      - "documents"
      summary: "Upload a document scan"
      description: "Allows an abiturient to upload a scanned document"
      operationId: "uploadScan"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "file"
        in: "formData"
        description: "The file to upload"
        required: true
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Document"
  /documents/updateScan/{ScanId}:
    put:
      tags:
      - "documents"
      summary: "Update a document"
      description: "Allows an abiturient to update a specific document"
      operationId: "updateDocument"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the document to update"
        required: true
        type: "string"
      - name: "document"
        in: "body"
        description: "Updated document data"
        required: true
        schema:
          $ref: "#/definitions/Document"
  /Applicant/getMyPrograms:
    get:
      tags:
      - "university"
      summary: "Get list of programs"
      description: "Get a list of my educational programs"
      operationId: "getMyPrograms"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/getMyPrograms"
  /Applicant/addProgramToMyList/{id}:
    post:
      tags:
      - "university"
      summary: "Add program to my list"
      description: "Add an educational program to the abiturient's list for enrollment"
      operationId: "addProgramToMyList"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the program to add"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
  /Applicant/changeProgramPriority/{id}:
    put:
      tags:
      - "university"
      summary: "Change program priority"
      description: "Change the priority of an educational program in the abiturient's list"
      operationId: "changeProgramPriority"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the program to change priority"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
  /Applicant/removeProgramFromMyList/{id}:
    delete:
      tags:
      - "university"
      summary: "Remove program from my list"
      description: "Remove an educational program from the abiturient's list for enrollment"
      operationId: "removeProgramFromMyList"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the program to remove"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
  /Applicant/getListOfPrograms:
    get:
      tags:
      - "university"
      summary: "Get list of programs"
      description: "Get a list of educational programs available for enrollment"
      operationId: "getListOfPrograms"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProgramList"
  /enrollment/getAdmission/{id}:
    get:
      tags:
      - "enrollment"
      summary: "Get admission details"
      description: "Get details of a specific admission"
      operationId: "getAdmission"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "ID of the admission to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Admission"
  /enrollment/getListOfAdmissions:
    get:
      tags:
      - "enrollment"
      summary: "Get list of admissions"
      description: "Get a list of admissions"
      operationId: "getListOfAdmissions"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AdmissionList"
  /enrollment/editAdmissionStatus/{id}:
    put:
      tags:
      - "enrollment"
      summary: "Reject admission"
      description: "Reject a specific admission"
      operationId: "rejectAdmission"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the admission to reject"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
  /enrollment/assignManager/{admissionId}:
    put:
      tags:
      - "enrollment"
      summary: "Assign manager to admission"
      description: "Assign a manager to a specific admission"
      operationId: "assignManager"
      parameters:
      - name: "admission_id"
        in: "path"
        description: "ID of the admission to assign a manager to"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
  /management/getApplicant/{id}:
    get:
      tags:
      - "management"
      summary: "Get applicant details"
      description: "Get details of a specific applicant"
      operationId: "getApplicant"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the applicant to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Applicant"
  /management/editApplicant/{id}:
    put:
      tags:
      - "management"
      summary: "Edit applicant details"
      description: "Edit details of a specific applicant"
      operationId: "editApplicant"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the applicant to edit"
        required: true
        type: "string"
      - name: "applicant"
        in: "body"
        description: "Updated applicant data"
        required: true
        schema:
          $ref: "#/definitions/Applicant"
      responses:
        200:
          description: "successful operation"
  /management/getListOfManagers:
    get:
      tags:
      - "management"
      summary: "Get list of managers"
      description: "Get a list of managers"
      operationId: "getListOfManagers"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ManagerList"
  /management/addManager/{userId}:
    post:
      tags:
      - "management"
      summary: "Add a new manager"
      description: "Add a new manager to the system"
      operationId: "addManager"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "manager"
        in: "body"
        description: "New manager data"
        required: true
        schema:
          $ref: "#/definitions/Manager"
      responses:
        200:
          description: "successful operation"
  /management/addMainManager/{userId}:
    post:
      tags:
      - "management"
      summary: "Add a new manager"
      description: "Add a new manager to the system"
      operationId: "addManager"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "manager"
        in: "body"
        description: "New manager data"
        required: true
        schema:
          $ref: "#/definitions/Manager"
      responses:
        200:
          description: "successful operation"
  /dictionary/importDictionary:
    post:
      tags:
      - "dictionary"
      summary: "Import dictionary data"
      description: "Import data for the dictionary"
      operationId: "importDictionary"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "data"
        in: "body"
        description: "Data to import"
        required: true
        schema:
          $ref: "#/definitions/DictionaryData"
      responses:
        200:
          description: "successful operation"
  /dictionary/checkStatus:
    get:
      tags:
      - "dictionary"
      summary: "Check dictionary import status"
      description: "Check the status of the dictionary import"
      operationId: "checkDictionaryStatus"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ImportStatus"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
  /user/register:
    post:
      tags:
      - "user"
      summary: "User registration"
      description: "Register a new user"
      operationId: "registerUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: "body"
        description: "User registration data"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
  /user/getProfile:
    get:
      tags:
      - "user"
      summary: "Get user profile"
      description: "Get the profile of the authenticated user"
      operationId: "getUserProfile"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserProfile"
  /user/editProfile:
    put:
      tags:
      - "user"
      summary: "Edit user profile"
      description: "Edit the profile of the authenticated user"
      operationId: "editUserProfile"
      parameters:
      - name: "user"
        in: "body"
        description: "Updated user profile data"
        required: true
        schema:
          $ref: "#/definitions/UserProfile"
      responses:
        200:
          description: "successful operation"
  /user/changePassword:
    post:
      tags:
      - "user"
      summary: "Change user's password"
      description: "Allows an abiturient to change their password"
      operationId: "changePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/createUser:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /notifications/email/{userId}:
    post:
      tags:
      - "notifications"
      summary: "Send email notification"
      description: "Send an email notification to the abiturient"
      operationId: "emailAbiturient"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "notification"
        in: "body"
        description: "Notification data"
        required: true
        schema:
          $ref: "#/definitions/EmailNotification"
      responses:
        200:
          description: "successful operation"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "https://petstore.swagger.io/oauth/authorize"
    flow: "implicit"
    scopes:
      read:pets: "read your pets"
      write:pets: "modify pets in your account"
definitions:
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      fullName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      role:
        type: "string"
        enum:
          - "applicant"
          - "manager"
          - "main_manager"
    xml:
      name: "User"
  Passport:
    type: "object"
    properties:
      series:
        type: "string"
      number:
        type: "string"
      issuedBy:
        type: "string"
      birthDate:
        type: "string"
      placeOfBirth:
        type: "string"
  Applicant:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      birthDate:
        type: "string"
        format: "date"
      gender:
        type: "string"
        enum:
          - "male"
          - "female"
      citizenship:
        type: "string"
      phoneNumber:
        type: "string"
    xml:
      name: "Applicant"
  Program:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      facultyId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      code:
        type: "string"
      educationLevel:
        type: "string"
        enum:
          - "bachelor"
          - "master"
          - "postgraduate"
      language:
        type: "string"
      educationForm:
        type: "string"
        enum:
          - "full_time"
          - "part_time"
    xml:
      name: "Program"
  Faculty:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Faculty"
  Document:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      applicantId:
        type: "integer"
        format: "int64"
      documentType:
        type: "string"
        enum:
          - "passport"
          - "education_document"
      status:
        type: "string"
        enum:
          - "created"
          - "under_review"
          - "approved"
          - "rejected"
    xml:
      name: "Document"
  Scan:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      documentId:
        type: "integer"
        format: "int64"
      fileName:
        type: "string"
      fileUrl:
        type: "string"
    xml:
      name: "Scan"
  Admission:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      applicantId:
        type: "integer"
        format: "int64"
      programId:
        type: "integer"
        format: "int64"
      priority:
        type: "integer"
      status:
        type: "string"
        enum:
          - "created"
          - "under_review"
          - "approved"
          - "rejected"
      managerId:
        type: "integer"
        format: "int64"
    xml:
      name: "Admission"
  Manager:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      facultyId:
        type: "integer"
        format: "int64"
    xml:
      name: "Manager"
  DictionaryItem:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
  
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
